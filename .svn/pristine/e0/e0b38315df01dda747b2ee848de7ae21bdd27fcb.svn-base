package net.northking.cloudplatform.security;


import net.northking.cloudplatform.domain.user.CltFunc;
import net.northking.cloudplatform.domain.user.CltRole;
import net.northking.cloudplatform.feign.user.RoleFeignClient;
import net.northking.cloudplatform.query.user.RoleQuery;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.access.SecurityConfig;
import org.springframework.security.web.FilterInvocation;
import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.util.*;

/**
 * @Title:
 * @Description:
 * @Company: Northking
 * @Author: chuangsheng.huang
 * @CreateDate: 2017/11/28
 * @UpdateUser:
 * @Version:0.1
 */
@Service
public class CltFilterInvocationSecurityMetadataSource implements FilterInvocationSecurityMetadataSource {
    private static Logger log = LoggerFactory.getLogger(CltFilterInvocationSecurityMetadataSource.class);

    @Autowired
    private RoleFeignClient roleFeignClient;

    private static Map<String, Collection<ConfigAttribute>> resourceMap = null;

    @Override
    public Collection<ConfigAttribute> getAttributes(Object object) throws IllegalArgumentException {
        FilterInvocation filterInvocation = (FilterInvocation) object;
        if (resourceMap == null) {
            loadResourceDefine();
            return null;

        }

        Iterator<String> it = resourceMap.keySet().iterator();
        while (it.hasNext()) {
            String resURL = (String)it.next();
            RequestMatcher requestMatcher = new AntPathRequestMatcher(resURL);
            if(requestMatcher.matches(filterInvocation.getHttpRequest())) {
                return resourceMap.get(resURL);
            }
        }

        return null;
    }

    @Override
    public Collection<ConfigAttribute> getAllConfigAttributes() {
        return new ArrayList<ConfigAttribute>();
    }

    @Override
    public boolean supports(Class<?> arg0) {
        return true;
    }


    @PostConstruct
    private void loadResourceDefine() {
        RoleQuery roleQuery = new RoleQuery();
        roleQuery.setPageSize(10000);
        roleQuery.setPageNum(1);

        List<CltRole> list = roleFeignClient.queryAllRoleList().getResultData();

        if(list!=null && list.size()>0) {
            resourceMap = new HashMap<String, Collection<ConfigAttribute>>();
            for (CltRole role : list) {
                String auth = role.getRoleCode();
                ConfigAttribute ca = new SecurityConfig(auth);
                List<String> query1 = new ArrayList<String>();
                List<CltFunc> list1 = role.getFuncs();
                if (list1 != null && list1.size() > 0) {
                    for (CltFunc cltFunc : list1) {
                        String url = cltFunc.getFuncUrl();
                        query1.add(url);
                    }
                }
                for (String res : query1) {
                    String url = res;

                    if (resourceMap.containsKey(url)) {
                        Collection<ConfigAttribute> value = resourceMap.get(url);
                        value.add(ca);
                        resourceMap.put(url, value);
                    } else {
                        Collection<ConfigAttribute> atts = new ArrayList<ConfigAttribute>();
                        atts.add(ca);
                        resourceMap.put(url, atts);
                    }

                }
            }
        }
    }

}
